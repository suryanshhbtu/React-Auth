{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program Files\\\\React\\\\Current\\\\Section_22 Adding Authentication To React Apps\\\\01-starting-project\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  login: taken => {},\n  logout: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [token, setToken] = useState(null);\n  const userIsLoggedIn = !!token; // convert truth or false value -> token is string non-empty-> true else-> false\n\n  const loginHandler = token => {\n    setToken(token);\n  };\n\n  const logoutHandler = () => {\n    setToken(null);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthContextProvider, \"e+LEOB8XbRIRiSUQHKM4ToWFki4=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","taken","logout","AuthContextProvider","props","setToken","userIsLoggedIn","loginHandler","logoutHandler","contextValue","children"],"sources":["D:/Program Files/React/Current/Section_22 Adding Authentication To React Apps/01-starting-project/src/store/auth-context.js"],"sourcesContent":["import React, {useState} from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n    token:'',\r\n    isLoggedIn: false,\r\n    login: (taken)=>{},\r\n    logout: () =>{},\r\n});\r\n\r\nexport const AuthContextProvider = (props) => {\r\n\r\n    const[token, setToken] = useState(null);\r\n    const userIsLoggedIn = !!token; // convert truth or false value -> token is string non-empty-> true else-> false\r\n\r\n    const loginHandler = (token) =>{\r\n        setToken(token);\r\n    };\r\n    \r\n    const logoutHandler = () => {\r\n        setToken(null);\r\n      };\r\n    \r\n      const contextValue = {\r\n        token: token,\r\n        isLoggedIn: userIsLoggedIn,\r\n        login: loginHandler,\r\n        logout: logoutHandler,\r\n      };\r\n    \r\n      return (\r\n        <AuthContext.Provider value={contextValue}>\r\n          {props.children}\r\n        </AuthContext.Provider>\r\n      );\r\n    };\r\nexport default AuthContext;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;EACpCC,KAAK,EAAC,EAD8B;EAEpCC,UAAU,EAAE,KAFwB;EAGpCC,KAAK,EAAGC,KAAD,IAAS,CAAE,CAHkB;EAIpCC,MAAM,EAAE,MAAK,CAAE;AAJqB,CAApB,CAApB;AAOA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAE1C,MAAK,CAACN,KAAD,EAAQO,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAjC;EACA,MAAMW,cAAc,GAAG,CAAC,CAACR,KAAzB,CAH0C,CAGV;;EAEhC,MAAMS,YAAY,GAAIT,KAAD,IAAU;IAC3BO,QAAQ,CAACP,KAAD,CAAR;EACH,CAFD;;EAIA,MAAMU,aAAa,GAAG,MAAM;IACxBH,QAAQ,CAAC,IAAD,CAAR;EACD,CAFH;;EAIE,MAAMI,YAAY,GAAG;IACnBX,KAAK,EAAEA,KADY;IAEnBC,UAAU,EAAEO,cAFO;IAGnBN,KAAK,EAAEO,YAHY;IAInBL,MAAM,EAAEM;EAJW,CAArB;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEC,YAA7B;IAAA,UACGL,KAAK,CAACM;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAzBE;;GAAMP,mB;;KAAAA,mB;AA0Bb,eAAeP,WAAf"},"metadata":{},"sourceType":"module"}